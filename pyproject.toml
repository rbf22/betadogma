[tool.poetry]
name = "betadogma"
version = "0.0.1"
description = "Revising the central dogma through data."
authors = ["BetaDogma Team"]
readme = "README.md"
packages = [{ include = "betadogma", from = "src" }]

[tool.poetry.dependencies]
python = ">=3.10,<3.14"  # Support Python 3.10 to 3.13
torch = ">=2.6"
transformers = ">=4.42"
tokenizers = ">=0.14"
numpy = ">=1.24,<2.0"
pandas = ">=2.0"
pyarrow = ">=14.0"
pyfaidx = ">=0.8.1"
pyyaml = ">=6.0"
tqdm = ">=4.66"
networkx = ">=3.2"
pytorch-lightning = "^2.5.5"
tensorboard = "^2.20.0"
psutil = "^7.1.0"


[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
hypothesis = "^6.97.0"  # Property-based testing
ruff = "^0.5.3"
mypy = "^1.8.0"
types-PyYAML = "^6.0.12.12"
types-requests = "^2.31.0.20240125"
codecov = "^2.1.13"
pre-commit = "^3.6.0"
black = "^24.1.1"
isort = "^5.13.2"

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "W",  # pycodestyle warnings
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",  # flake8-logging
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "A",  # flake8-builtins
    "N",  # pep8-naming
    "Q",  # flake8-quotes
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # Line too long (handled by black)
    "B008",  # Do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests

[tool.black]
line-length = 100
target-version = ["py310"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["torch", "pytorch_lightning.*"]
ignore_missing_imports = true

[build-system]
requires = ["poetry-core>=1.8.0"]
build-backend = "poetry.core.masonry.api"
